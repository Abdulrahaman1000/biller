{"ast":null,"code":"const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nconst formatCurrency = insertedCurrency => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'NGN'\n  });\n  let currency = formatter.format(insertedCurrency).substring(3);\n\n  if (currency.startsWith('N') && !currency.startsWith('NaN')) {\n    currency = currency.substring(1, currency.length);\n    currency = ' -' + currency;\n  }\n\n  if (currency.includes('.00')) {\n    currency = currency.substring(0, currency.length - 3);\n  }\n\n  return currency;\n};\n\nconst formatDate = insertedDate => {\n  const date = new Date(insertedDate);\n  const year = date.getFullYear().toString().substring(2);\n  const month = months[date.getMonth()];\n  const day = date.getDate();\n  const time = date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n  return day + ' ' + month + \" '\" + year + ' at ' + time; // 12 Nov ‘21 at 12:30PM\n};\n\nconst getOS = () => {\n  const userAgent = window.navigator.userAgent,\n        platform = window.navigator.platform,\n        macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n        windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\n        iosPlatforms = ['iPhone', 'iPad', 'iPod'];\n  let os = 'WEB';\n\n  if (macosPlatforms.indexOf(platform) !== -1) {\n    os = 'Web'; //Mac\n  } else if (iosPlatforms.indexOf(platform) !== -1) {\n    os = 'IOS';\n  } else if (windowsPlatforms.indexOf(platform) !== -1) {\n    os = 'WEB'; //Windows\n  } else if (/Android/.test(userAgent)) {\n    os = 'ANDROID';\n  } else if (!os && /Linux/.test(platform)) {\n    os = 'WEB'; //linus\n  }\n\n  return os;\n};\n\nexport { formatCurrency, getOS, formatDate };","map":{"version":3,"sources":["C:/All Projects/billerr/DataNowUserReact3/src/helpers/utils.tsx"],"names":["months","formatCurrency","insertedCurrency","formatter","Intl","NumberFormat","style","currency","format","substring","startsWith","length","includes","formatDate","insertedDate","date","Date","year","getFullYear","toString","month","getMonth","day","getDate","time","toLocaleString","hour","minute","hour12","getOS","userAgent","window","navigator","platform","macosPlatforms","windowsPlatforms","iosPlatforms","os","indexOf","test"],"mappings":"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","sourcesContent":["const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\nconst formatCurrency = (insertedCurrency: number) => {\r\n    const formatter = new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'NGN',\r\n    });\r\n    let currency = formatter.format(insertedCurrency).substring(3);\r\n    if (currency.startsWith('N') && !currency.startsWith('NaN')) {\r\n        currency = currency.substring(1, currency.length);\r\n        currency = ' -' + currency;\r\n    }\r\n    if (currency.includes('.00')) {\r\n        currency = currency.substring(0, currency.length - 3);\r\n    }\r\n    return currency;\r\n};\r\n\r\nconst formatDate = (insertedDate: string) => {\r\n    const date = new Date(insertedDate);\r\n    const year = date.getFullYear().toString().substring(2);\r\n    const month = months[date.getMonth()];\r\n    const day = date.getDate();\r\n    const time = date.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n    return day + ' ' + month + \" '\" + year + ' at ' + time;\r\n\r\n    // 12 Nov ‘21 at 12:30PM\r\n};\r\n\r\nconst getOS = () => {\r\n    const userAgent = window.navigator.userAgent,\r\n        platform = window.navigator.platform,\r\n        macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\r\n        windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\r\n        iosPlatforms = ['iPhone', 'iPad', 'iPod'];\r\n    let os = 'WEB';\r\n\r\n    if (macosPlatforms.indexOf(platform) !== -1) {\r\n        os = 'Web'; //Mac\r\n    } else if (iosPlatforms.indexOf(platform) !== -1) {\r\n        os = 'IOS';\r\n    } else if (windowsPlatforms.indexOf(platform) !== -1) {\r\n        os = 'WEB'; //Windows\r\n    } else if (/Android/.test(userAgent)) {\r\n        os = 'ANDROID';\r\n    } else if (!os && /Linux/.test(platform)) {\r\n        os = 'WEB'; //linus\r\n    }\r\n\r\n    return os;\r\n};\r\n\r\nexport { formatCurrency, getOS, formatDate };\r\n"]},"metadata":{},"sourceType":"module"}